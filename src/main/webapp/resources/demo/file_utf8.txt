第四章  字节流
  第1节、字节流之文件流FileInputStream
     IO流(输入流、输出流)
     字节流、字符流
     1、字节流
        1) InputStream、OutputStream
           InputStream抽象了应用程序读取数据的方式
           OutputStream抽象了应用程序写出数据的方式
        2) EOF = End 读取-1就读到了结尾
        3) 输入流基本方法
           int b = in.read(); 读取一个字节无符号填充到int低八位，-1是EOF
           in.read(byte[] buf); 读取数据填充到字节数组buf
           in.read(byte[] buf, int start, int size); 读取数据到字节数组buf
           从buf的start位置开始，存放size工度的数据
        4) 输出流基本方法
           out.write(int b); 写出一个byte到流，b的低8位
           out.write(byte[] buf); 将buf字节数组都写入到流
           out.write(byte[], int start, int size);
           字节数组buf从start位置，开始写size长度的字节到流
              
  第2节、字节流之文件FileIputStream
     System.out.print(Integer.toHexString(buf[i] & 0xff)+" ");
     //byte类型8位，int类型32位
     //为了避免数据转换错误，通过&0xff将高24位清零

  第3节、字节流之文件输出流FileOutputStream
     FileOutputStream 实现了向文件中写出byte数据的方法

  第4节、字节流之数据输入输出流
     DataOutputStream/DataInputStream
     对"流"功能的扩展，可以更加方便的读取int,long,字符等类型数拓
     DataOutputStream
         writeInt()/writeDouble()/writeUTF8();

  第5节、字节缓冲流
     BufferedInputStream&BufferedOutputStream
     这两个流类为IO提供了带缓冲区的操作，一般打开文件进行写入或读取操作时，都会加上缓冲，这种流模式提高了IO的性能
     从应用程序中把输入放入文件，相当于将一缸水倒入另一个缸中：
     FileOutputStream-------->write()方法相当于一滴一滴的把水“转移”过骈
     DataOutputStream-------->writeXxx()方法会方便一些，相当于一瓢一瓢的把水“转移”过去
     BufferedOutputStream---->writeXxx()方法更方便，相当于一瓢一瓢先放入桶中，再从桶中倒入另一个缸中

第五章 字符流
  第1节、字节字符转换流
      1）编码问题
      2）认识文本和文本文件
      java的文本(char)是16位无符号吴波数， 字符的unicode编码(双字节编码)
      文件是byte byte byte ...的数据序列
      文件文件是文本(char)序列按照某种编码方案(utf-8,utf-16be,gbk)序列化为byte的存储序列
      3）字符流(Reader,Writer)---->操作的是文本文件
      字符的处理，一次处理一个字符
      字符的底层任然是基本的字节序列
      字符流的基本实现
          InputStreamReader 完成byte流解析为char流，按照编码解析
          OutputStreamWriter 完成char流到byte流，按照编码处理



  第2节、字符流之文件读写流

  第3节、字符流的过滤器